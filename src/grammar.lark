?start: body

body: stmt*

// Statement grammar

?stmt: if_stmt
     | if_else_stmt
     | while_stmt
     | do_while_stmt
     | for_stmt
     | break_stmt
     | continue_stmt
     | return_stmt
     | throw_stmt
     | try_stmt
     | include_stmt
     | function_stmt
     | module_stmt
     | class_stmt
     | exprs ";"
     | ";" -> nop_stmt

include_stmt: _INCLUDE STRING ";"

return_stmt: _RETURN [expr] ";"
if_stmt: _IF expr "{" body "}"

if_else_stmt: _IF expr "{" body "}" _ELSE (if_else_stmt | if_stmt | "{" body "}")

while_stmt: _WHILE expr "{" body "}"

do_while_stmt: _DO "{" body "}" _WHILE expr ";"

for_stmt: _FOR "(" [exprs] ";" [expr] ";" [exprs] ")" "{" body "}"

break_stmt: _BREAK ";"
continue_stmt: _CONTINUE ";"

function_stmt: _FUN IDENT "(" form_args ")" "{" body "}"

module_stmt: _MODULE IDENT "{" module_entry* "}"
module_entry: module_var_stmt | function_stmt | class_stmt
module_var_stmt: IDENT "=" expr ";"

class_stmt: _CLASS IDENT [_EXTENDS IDENT] "{" class_entry* "}"
class_entry: module_var_stmt | function_stmt

// Expression grammar

?exprs: _comma_list{expr}

?expr: _FUN "(" form_args ")" "->" expr -> short_fn_literal
     | assign

?assign: pattern "=" expr
       | pattern INPLACE_OP expr -> inplace
       | or
INPLACE_OP: "+=" | "-=" | "*=" | "/="

?pattern: IDENT -> var_pattern
        | postfix "." IDENT -> dot_pattern

?or: and OR_OP or
   | and
OR_OP: "||"

?and: comp AND_OP and
    | comp
AND_OP: "&&"

?comp: bit_or COMP_OP bit_or -> binary_op
     | bit_or
COMP_OP: "==" | "!=" | /<(?!<)/ | "<=" | />(?!>)/ | ">="

?sum: sum SUM_OP prod -> binary_op
    | prod
SUM_OP: "+" | "-"

?prod: prod PROD_OP prefix -> binary_op
     | prefix
PROD_OP: "*" | "/"

?prefix: PREFIX_OP prefix
       | postfix
PREFIX_OP: "-"

?postfix: postfix "(" spec_args ")" -> call
        | postfix "." IDENT -> dot
        | atom
spec_args: _comma_list{expr}?

?atom: literal
     | IDENT -> var
     | _NEW IDENT ["(" spec_args ")"] -> new
     | "(" expr ")"

literal: STRING -> string
       | INT -> int
       | FLOAT -> float
       | _TRUE -> true_literal
       | _FALSE -> false_literal
       | _NULL -> null_literal
       | _FUN "(" form_args ")" "{" body "}" -> function_literal
       | "[" _comma_list{expr}? "]" -> list
       | "{" _comma_list{pair}? "}" -> dict

// Misc

form_args: _comma_list{IDENT}?

pair: expr ":" expr

// Templates

_comma_list{e}: e ("," e)*

// Tokens

STRING: STRING_DQUOTE
      | STRING_SQUOTE
STRING_DQUOTE: "\"" _STRING_ESC_INNER "\""
STRING_SQUOTE: "'" _STRING_ESC_INNER "'"
_STRING_INNER: /.*?/
_STRING_ESC_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/

IDENT: /(?!/ RESERVED  /)/ CNAME /\b/

RESERVED: _TRUE | _FALSE | _NULL | _FUN | _RETURN | _IF | _ELSE | _WHILE | _DO
        | _FOR | _BREAK | _CONTINUE | _INCLUDE | _MODULE | _CLASS | _NEW | _IN
        | _EXTENDS | _THROW | _TRY | _CATCH | _FINALLY
_TRUE: /true\b/
_FALSE: /false\b/
_NULL: /null\b/
_NEW: /new\b/
_FUN: /fun\b/
_RETURN: /return\b/
_IF: /if\b/
_ELSE: /else\b/
_WHILE: /while\b/
_DO: /do\b/
_FOR: /for\b/
_BREAK: /break\b/
_CONTINUE: /continue\b/
_INCLUDE: /include\b/
_MODULE: /module\b/
_CLASS: /class\b/
_EXTENDS: /extends\b/
_IN: /in\b/
_THROW: /throw\b/
_TRY: /try\b/
_CATCH: /catch\b/
_FINALLY: /finally\b/

%import common.CNAME
%import common.INT
%import common.FLOAT
%import common.SH_COMMENT
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.WS

%ignore SH_COMMENT
%ignore C_COMMENT
%ignore CPP_COMMENT
%ignore WS
